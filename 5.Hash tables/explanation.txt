Самая частая проблема для использования Map — кэширование. Про него мы уже говорили во втором разделе, когда познакомились с Map. Теперь пришло время и самим написать кэш!

Напомним, что кэш — это некая структура данных, с помощью которой мы «запоминаем» результаты выполнения долгих функций (запрос с API или просто тяжёлые вычисления) и потом переиспользуем их вместо того, чтобы заново всё высчитывать. Было бы хорошо, чтобы кэш работал за O(1) на чтение и запись (что Map нам и позволяет сделать).

Писать будем так называемый LRU-кэш или Least Recently Used кэш. Суть его в том, чтобы запоминать только последние несколько записей (сколько — дело нашей настройки), а как только в него пытаются записать больше — удалять самую старую. Такой кэш хорошо подходит для случаев, когда параметров может быть очень много, а памяти мы хотим или можем выделять только определённое количество.


Для начала создадим непосредственно хэш-таблицу и опишем самые простые методы. Описание удаления и чтения из кэша очень просты — это всего лишь «обёртки» над встроенными в Map функциями.


А вот с заполнением кэша не всё так просто — хотя с реализацией Map в JavaScript нам повезло больше, чем другим языкам. Перед тем, как положить новый ключ в таблицу, нам нужно убедиться, что она не переполнена. И если так есть, то удалить самый первый ключ.

К счастью, Map хранит ключи итератором (получаемым методом keys()) в порядке добавления, а размер — отдельным полем size. Так что нам не придётся мучиться ни с поддержкой собственного счётчика размера, ни с организацией ключей в самописный связный список (хотя это мы уже можем делать).
